/*
 * This file is generated by jOOQ.
 */
package org.igsq.igsqbot.entities.jooq.tables;


import org.igsq.igsqbot.entities.jooq.Keys;
import org.igsq.igsqbot.entities.jooq.Public;
import org.igsq.igsqbot.entities.jooq.tables.records.MutesRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Mutes extends TableImpl<MutesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.mutes</code>
     */
    public static final Mutes MUTES = new Mutes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MutesRecord> getRecordType() {
        return MutesRecord.class;
    }

    /**
     * The column <code>public.mutes.muteid</code>.
     */
    public final TableField<MutesRecord, Long> MUTEID = createField(DSL.name("muteid"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.mutes.userid</code>.
     */
    public final TableField<MutesRecord, Long> USERID = createField(DSL.name("userid"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.mutes.guildid</code>.
     */
    public final TableField<MutesRecord, Long> GUILDID = createField(DSL.name("guildid"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.mutes.muteduntil</code>.
     */
    public final TableField<MutesRecord, LocalDateTime> MUTEDUNTIL = createField(DSL.name("muteduntil"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    private Mutes(Name alias, Table<MutesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Mutes(Name alias, Table<MutesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.mutes</code> table reference
     */
    public Mutes(String alias) {
        this(DSL.name(alias), MUTES);
    }

    /**
     * Create an aliased <code>public.mutes</code> table reference
     */
    public Mutes(Name alias) {
        this(alias, MUTES);
    }

    /**
     * Create a <code>public.mutes</code> table reference
     */
    public Mutes() {
        this(DSL.name("mutes"), null);
    }

    public <O extends Record> Mutes(Table<O> child, ForeignKey<O, MutesRecord> key) {
        super(child, key, MUTES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<MutesRecord, Long> getIdentity() {
        return (Identity<MutesRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<MutesRecord> getPrimaryKey() {
        return Keys.MUTES_PKEY;
    }

    @Override
    public List<UniqueKey<MutesRecord>> getKeys() {
        return Arrays.<UniqueKey<MutesRecord>>asList(Keys.MUTES_PKEY, Keys.MUTES_USERID_KEY, Keys.MUTES_GUILDID_KEY);
    }

    @Override
    public List<ForeignKey<MutesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MutesRecord, ?>>asList(Keys.MUTES__MUTES_GUILDID_FKEY);
    }

    public Guilds guilds() {
        return new Guilds(this, Keys.MUTES__MUTES_GUILDID_FKEY);
    }

    @Override
    public Mutes as(String alias) {
        return new Mutes(DSL.name(alias), this);
    }

    @Override
    public Mutes as(Name alias) {
        return new Mutes(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Mutes rename(String name) {
        return new Mutes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Mutes rename(Name name) {
        return new Mutes(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Long, Long, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
