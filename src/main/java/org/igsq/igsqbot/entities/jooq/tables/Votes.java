/*
 * This file is generated by jOOQ.
 */
package org.igsq.igsqbot.entities.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.igsq.igsqbot.entities.jooq.Keys;
import org.igsq.igsqbot.entities.jooq.Public;
import org.igsq.igsqbot.entities.jooq.tables.records.VotesRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Votes extends TableImpl<VotesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.votes</code>
     */
    public static final Votes VOTES = new Votes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VotesRecord> getRecordType() {
        return VotesRecord.class;
    }

    /**
     * The column <code>public.votes.voteid</code>.
     */
    public final TableField<VotesRecord, Long> VOTEID = createField(DSL.name("voteid"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.votes.guildid</code>.
     */
    public final TableField<VotesRecord, Long> GUILDID = createField(DSL.name("guildid"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.votes.timestamp</code>.
     */
    public final TableField<VotesRecord, LocalDateTime> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.votes.topic</code>.
     */
    public final TableField<VotesRecord, String> TOPIC = createField(DSL.name("topic"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.votes.optionone</code>.
     */
    public final TableField<VotesRecord, String> OPTIONONE = createField(DSL.name("optionone"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.votes.optiontwo</code>.
     */
    public final TableField<VotesRecord, String> OPTIONTWO = createField(DSL.name("optiontwo"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.votes.votecountone</code>.
     */
    public final TableField<VotesRecord, Integer> VOTECOUNTONE = createField(DSL.name("votecountone"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("'-1'::integer", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.votes.votecounttwo</code>.
     */
    public final TableField<VotesRecord, Integer> VOTECOUNTTWO = createField(DSL.name("votecounttwo"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("'-1'::integer", SQLDataType.INTEGER)), this, "");

    private Votes(Name alias, Table<VotesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Votes(Name alias, Table<VotesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.votes</code> table reference
     */
    public Votes(String alias) {
        this(DSL.name(alias), VOTES);
    }

    /**
     * Create an aliased <code>public.votes</code> table reference
     */
    public Votes(Name alias) {
        this(alias, VOTES);
    }

    /**
     * Create a <code>public.votes</code> table reference
     */
    public Votes() {
        this(DSL.name("votes"), null);
    }

    public <O extends Record> Votes(Table<O> child, ForeignKey<O, VotesRecord> key) {
        super(child, key, VOTES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<VotesRecord, Long> getIdentity() {
        return (Identity<VotesRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<VotesRecord> getPrimaryKey() {
        return Keys.VOTES_PKEY;
    }

    @Override
    public List<UniqueKey<VotesRecord>> getKeys() {
        return Arrays.<UniqueKey<VotesRecord>>asList(Keys.VOTES_PKEY, Keys.VOTES_GUILDID_KEY);
    }

    @Override
    public List<ForeignKey<VotesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<VotesRecord, ?>>asList(Keys.VOTES__VOTES_GUILDID_FKEY);
    }

    public Guilds guilds() {
        return new Guilds(this, Keys.VOTES__VOTES_GUILDID_FKEY);
    }

    @Override
    public Votes as(String alias) {
        return new Votes(DSL.name(alias), this);
    }

    @Override
    public Votes as(Name alias) {
        return new Votes(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Votes rename(String name) {
        return new Votes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Votes rename(Name name) {
        return new Votes(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, Long, LocalDateTime, String, String, String, Integer, Integer> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
